version = "1.0"
name = "Socket"

local log = Log.new(name .. ".log")
local ignore = {ready = true, busy = true}

-- class Socket
Socket = {}
Socket.__index = Socket

function new(target)
	local tmp = {}
	setmetatable(tmp, Socket)
	tmp.target = target
	
	function tmp:connect(target)
		self.target = target
	end
	
	function tmp:disconnect()
		tmp:connect(nil)
	end
	
	function tmp:send(msg, id)
		if (self.target) then
			rednet.send(self.target or id, msg)
			log:write((self.target or id) .. ": " .. (msg or "<nil/false>"), "send")
		else
			rednet.broadcast(msg)
			log:write("all: " .. (msg or "<nil/false>"), "send")
		end
	end
	
	function tmp:recv(timeout, noignore)
		local id, msg, dist
		local start = os.clock()
		if (timeout) then timeout = timeout / 10 end
		repeat
			id, msg, dist = rednet.receive(timeout)
			if (timeout and os.clock() - start >= timeout * 10) then 
				log:write("timeout", "recv")
				return { time = os.clock() - start } 
			end
		until (msg and (noignore or not ignore[msg]) and (not self.target or id == self.target))
		log:write(id .. ": " .. msg, "recv")
		return {msg = msg, dist = dist, time = os.clock() - start, id = id}
	end
	
	function tmp:sendAcked(msg, timeout, trys)
		trys = type(trys) == "Number" and trys or 1
		repeat
			self:send(msg)
			if (self:recv(timeout).msg == "ACK") then return true end
			trys = trys - 1
		until (trys < 1)
		return false
	end
	
	function tmp:recvAcked(timeout, noignore)
		self:send("ACK", self:recv(timeout, noignore).id)
	end
	
	return tmp	
end

-- end class


log:write("version: " .. version)

