version = "1.0"
name = "Window"
local log = Log.new(name .. ".log")

fgColor, bgColor = colors.lime, colors.black

-- class Window
Window = {}
Window.__index = Window

function new(out, title, x, y, width, height)
	local tmp = Component.new(x, y, width or 51, height or 19)
	setmetatable(tmp, Window)
	tmp.title = Label.new(title)
	tmp.fgColor, tmp.bgColor = fgColor, bgColor
	tmp.out = out
	tmp.drawingPane = DrawingPane.new(out, tmp.x + 1, tmp.y  + 3, tmp.width - 2, tmp.height - 4, true)
	tmp.comp = {}

	function tmp:add(component)
		local i = 1
		while (self.comp[i]) do
			i = i + 1
		end
		component.id = i
		component:setParent(self)
		self.comp[i] = component
	end
	
	function tmp:nl(x)
		local _, y = self.out.getCursorPos();
		self.out.setCursorPos(x or 1, y + 1);
	end

	function tmp:clear()
		self.out.clear();
		self.out.setCursorPos(1, 1);
	end

	function tmp:draw(out)
		out.setTextColor(self.fgColor)
		out.setBackgroundColor(self.bgColor)
		out.setCursorPos(self.x, self.y)

		out.write("+");
		for i = 1, self.width - 4 do out.write("-") end
		out.write("+-+")
		self:nl(self.x)

		out.write("| ")
		for _ = 1, self.width - 5 do
			out.write(" ")
		end
		out.write("|X|")
		self:nl(self.x)
		
		out.write("+");
		for i = 1, self.width - 4 do out.write("-") end
		out.write("+-+")
		self:nl(self.x)

		for _ = 1, self.height - 4 do
			out.write("|")
			for _ = 1, self.width - 2 do
				out.write(" ")
			end
			out.write("|")
			self:nl(self.x)
		end

		out.write("+");
		for i = 1, self.width - 2 do out.write("-") end
		out.write("+")
		self:nl(self.x)

		self.title:draw(DrawingPane.new(out, self.x + 2, self.x + 1, self.width - 4, 1, true))
		
		for _, comp in ipairs(self.comp) do
			if (comp.show) then comp:draw(self.drawingPane) end
		end
		_ = self.onDraw and self:onDraw(self.drawingPane)
	end

	function tmp:loop()
		_ = self.onStart and self:onStart()
		while not self.exit do
			self:draw(self.out)
			local e, p1, p2, p3, p4, p5 = os.pullEvent()
			log:write(tostring(e) .. ", " .. tostring(p1) .. ", " .. tostring(p2) .. ", " .. 
						tostring(p3) .. ", " .. tostring(p4) .. ", " .. tostring(p5), "event")
			if (e == "monitor_touch") then
				if (p2 - self.x == self.width - 2 and p3 - self.y == 1) then self.exit = true
				elseif (not (self.onTouch and self:onTouch(p2, p3))) then
					for _, comp in ipairs(self.comp) do
						if (comp.show) then
							comp:touch(p2 - self.drawingPane.x + 1, p3 - self.drawingPane.y + 1)
						end
					end
				end
			elseif (e == "mouse_click") then
				if (p2 - self.x == self.width - 2 and p3 - self.y == 1) then self.exit = true
				elseif (not (self.onClick and self:onClick(p1, p2, p3))) then
					for _, comp in ipairs(self.comp) do
						if (comp.show) then
							comp:click(p1, p2 - self.drawingPane.x + 1, p3 - self.drawingPane.y + 1)
						end
					end
				end
			elseif (e == "timer") then
				_ = self.onTime and self:onTime(p1)
			elseif (e == "rednet") then
				_ = self.onRednetRecv and self:onRednetRecv(p1, p2, p3)
			end
		end
		_ = self.onEnd and self:onEnd()
		self.exit = nil
		self.out.setTextColor(fgColor)
		self.out.setBackgroundColor(bgColor)
		self:clear()
	end

	return tmp
end
-- end class

log:write("version: " .. version)
